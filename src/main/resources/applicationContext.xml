<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- (1) applictionContext.xml(스프링컨테이너)는 하나로 이루어져있으면 너무 길어질수 있기에
		기능별로 분리하여 사용할 수 있다. -> appCtx1.xml , appCtx2.xml, appCtx3.xml
		(2) 그리고 분리된 스프링설정파일은 하나의 xml 파일에서 import하여 사용할 수 있다.
 -->
<!--스프링컨테이너에 빈 객체를 생성하고 메모리에 업로드해둠. -->
<bean id="tWalk" class="kr.co.springContainner.TransportationWalk"></bean>

<!-- ## DI 객체 생성 예시 1 :생성자를 이용한 의존 객체 주입-->
<bean id="studentDao" class="ems.member.dao.StudentDao"></bean>

<bean id="registerService" class="ems.member.service.StudentRegisterService">
	<constructor-arg ref="studentDao"></constructor-arg> <!-- 의존주입 -->
</bean>
<bean id="modifyService" class="ems.member.service.StudentModifyService">
	<constructor-arg ref="studentDao"></constructor-arg>
</bean>
<bean id="deleteService" class="ems.member.service.StudentDeleteService">
	<constructor-arg ref="studentDao"></constructor-arg>
</bean>
<bean id="selectService" class="ems.member.service.StudentSelectService">
	<constructor-arg ref="studentDao"></constructor-arg>
</bean>
<bean id="allSelectService" class="ems.member.service.StudentAllSelectService">
	<constructor-arg ref="studentDao"></constructor-arg>
</bean>

<!-- ## DI 객체 생성 예시 2 :setter를 이용한 의존 객체 주입 -->
<bean id="dateBaseConnectionInfoDev" class="ems.member.DateBaseConnectionInfo">
	<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property> <!-- name의 값은 Setter의 set 뒤부터 첫번째 소문자로 변경 후 -->
	<property name="userId" value="scott"></property>
	<property name="userPwd" value="tiger"></property>
	
	<!-- List타입일 경우 -->
	<property name="developers">
		<list>
			<value>Choi.</value>
			<value>Joy.</value>
			<value>Jasper.</value>
		</list>
	</property>
	
	<!-- Map타입일 경우 -->
	<property name="adminstrators">
		<map>
			<entry>
				<key>
					<value>Choi</value>
				</key>
					<value>Choi@abcd.co.kr</value>
			</entry>
			<entry>
				<key>
					<value>Joy</value>
				</key>
				<value>Joy@efgh.co.kr</value>
			</entry>
			<entry>
				<key>
					<value>Jasper</value>
				</key>
				<ref bean = "dataBaseConnectionInfoDev"></ref>
			</entry>
		</map>
	</property>
</bean>
	<!-- Bean의 범위 -->
	<!-- (1) 싱글톤
			: 스프링 컨테이너에서 생성된 빈 객체의 경우, 최초 한 개 생성되고, 나머지 getBean()메소드로 호출. 이 때 동알한 객체가 반환됨.
			(2) 프로토타입 (<->싱글톤)
			: 싱글톤 범위와 반대. 호출할때마다 다른 객체를 생성하고 싶을 때.
			개발자가 별도로 스프링 설정파일에서 설정해주어야 함. scope 속성을 명시.
	 -->
	<bean id="dependencyBean" class="scope.ex.DependencyBean" scope="prototype">
		<constructor-arg ref="injectionBean"/>
		<property name="injectionBean" ref="injectionBean"/>
	</bean>

</beans>